class Solution {
public:
            // int f(vector<vector<int>>& matrix,int m,int n,vector<vector<int>>& dp){
            //     if(n<0 || n>=matrix[0].size())return 1e8;
            //     if(m==0)return matrix[m][n];
            //     if(dp[m][n]!=-1)return dp[m][n];

            //     int up=matrix[m][n]+f(matrix,m-1,n,dp);
            //     int ld=matrix[m][n]+f(matrix,m-1,n-1,dp);
            //     int rd=matrix[m][n]+f(matrix,m-1,n+1,dp);

            //     return dp[m][n]=min(up,min(ld,rd));
            // }
    int minFallingPathSum(vector<vector<int>>& matrix) {
    // ðŸ‘‰ Memoization 
            // int mini=INT_MAX;
            // int m=matrix.size();
            // int n=matrix[0].size();
            // vector<vector<int>>dp(n,vector<int>(n,-1));
            // for(int i=0;i<n;i++){
            //     mini=min(mini,f(matrix,m-1,i,dp));
            // }
            // return mini;
      
    // ðŸ‘‰ Tabulation
            int m=matrix.size();
            int n=matrix[0].size();
            vector<vector<int>>dp(n,vector<int>(n,-1));

            for(int i=0;i<n;i++){
                dp[0][i]=matrix[0][i];
            }

            for(int i=1;i<m;i++){
                for(int j=0;j<n;j++){
                    int up=matrix[i][j]+dp[i-1][j];
                    int ld=matrix[i][j];
                    int rd=matrix[i][j];

                    if(j-1<0 ){
                        ld+=1e8;
                    }else ld+=dp[i-1][j-1];

                    if(j+1>=n ){
                        rd+=1e8;
                    }else rd+=dp[i-1][j+1];

                    dp[i][j]=min(up,min(ld,rd));
                }
            }
            int mini=INT_MAX;
            for(int i=0;i<n;i++){
                if(dp[m-1][i]<mini){
                    mini=dp[m-1][i];
                }
            }
            return mini;

    // ðŸ‘‰ space optimization

             int m=matrix.size();
             int n=matrix[0].size();
             vector<int>prev(n,0);
             vector<int>cur(n,0);

             for(int i=0;i<n;i++){
                cur[i] =prev[i]=matrix[0][i];
             }

             for(int i=1;i<m;i++){
                 for(int j=0;j<n;j++){
                     int up=matrix[i][j]+prev[j];
                     int ld=matrix[i][j];
                     int rd=matrix[i][j];
                     
                     if(j-1<0)ld+=1e8;
                     else ld+=prev[j-1];

                     if(j+1>=n)rd+=1e8;
                     else rd+=prev[j+1];

                     cur[j]=min(up,min(ld,rd));
                 }
                 prev=cur;
             }
             int mini=INT_MAX;

             for(int i=0;i<n;i++){
                 if(cur[i]<mini){
                     mini=cur[i];
                 }
             }
             return mini;
    }
};
